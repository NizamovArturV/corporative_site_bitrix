<?php    if (!defined("B_PROLOG_INCLUDED") || B_PROLOG_INCLUDED !== true) {        die();    }    use Bitrix\Main\Loader;    use Bitrix\Main\LoaderException;    use Bitrix\Main\Entity;    class Sorting extends CBitrixComponent    {        public $user;        public function __construct($component = null)        {            parent::__construct($component);            CModule::IncludeModule('iblock');            CModule::IncludeModule('highloadblock');            global $USER;            $this->user = $USER;        }        public function sorting() {            $sorting = [                ['NAME' => 'по популярности', 'SORT_BY' => 'SHOW_COUNTER' , 'SORT_ORDER' => 'DESC'],                ['NAME' => 'сначала дешевые', 'SORT_BY' => 'PROPERTY_AMOUNT' , 'SORT_ORDER' => 'ASC'],                ['NAME' => 'сначала дорогие', 'SORT_BY' => 'PROPERTY_AMOUNT' , 'SORT_ORDER' => 'DESC'],                ['NAME' => 'по названию (А-Я)', 'SORT_BY' => 'NAME' , 'SORT_ORDER' => 'ASC'],                ['NAME' => 'по названию (Я-А)', 'SORT_BY' => 'NAME' , 'SORT_ORDER' => 'DESC'],            ];            if ($this->arParams['PROFESSIONS'] === 'Y') {                unset($sorting[1]);                unset($sorting[2]);            }            foreach ($sorting as $key => $sort) {                if ($_GET['SORT_BY'] === $sort['SORT_BY'] && $_GET['SORT_ORDER'] === $sort['SORT_ORDER']) {                    $sorting[$key]['ACTIVE'] = true;                    $this->arResult['ACTIVE_NAME']=  $sort['NAME'];                }            }            if (!$this->arResult['ACTIVE_NAME']) {                $sorting[0]['ACTIVE'] = true;                $this->arResult['ACTIVE_NAME'] = $sorting[0]['NAME'];            }            return $sorting;        }        public function executeComponent()        {            $this->arResult['SORT'] = $this->sorting();            $this->includeComponentTemplate();        }    }
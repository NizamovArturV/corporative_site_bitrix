<?php    if (!defined("B_PROLOG_INCLUDED") || B_PROLOG_INCLUDED !== true) {        die();    }    use Bitrix\Main\Loader;    use Bitrix\Main\LoaderException;    use Bitrix\Main\Entity;    class Filter extends CBitrixComponent    {        public $user;        public function __construct($component = null)        {            parent::__construct($component);            CModule::IncludeModule('iblock');            CModule::IncludeModule('highloadblock');            global $USER;            $this->user = $USER;        }        public function getProperties() {            $properties = CIBlockProperty::GetList(Array("sort"=>"asc", "name"=>"asc"), Array("ACTIVE"=>"Y", "IBLOCK_ID"=>$this->arParams['IBLOCK_ID']));            while ($prop_fields = $properties->GetNext())            {                $arProps[] = $prop_fields;            }            return $arProps;        }        public function prepareFilters($arProps) {            global $APPLICATION;            foreach ($arProps as $prop) {                if (!isset($this->arParams['FILTERS'][$prop['CODE']]['TYPE'])) {                    continue;                } else {                    $finalProps[$prop['CODE']]['TYPE'] = $this->arParams['FILTERS'][$prop['CODE']]['TYPE'];                }                $sectionCode = $this->getSectionCode();                switch ($prop['PROPERTY_TYPE']){                    case 'L':                        $property_enums = CIBlockPropertyEnum::GetList(Array("DEF"=>"DESC", "SORT"=>"ASC"), Array("IBLOCK_ID"=>$this->arParams['IBLOCK_ID'], "CODE"=>$prop['CODE']));                        while($enum_fields = $property_enums->GetNext())                        {                            $finalProps[$prop['CODE']]['VALUES'][$enum_fields['ID']] = $enum_fields['VALUE'];                        }                        break;                    case 'N':                        $arSelect = Array("ID", "IBLOCK_ID", "NAME", "DATE_ACTIVE_FROM","PROPERTY_*");                        $arFilter = Array("IBLOCK_ID"=> $this->arParams['IBLOCK_ID'], "ACTIVE_DATE"=>"Y", "ACTIVE"=>"Y");                        if ($sectionCode) {                            $arFilter = array_merge($arFilter, ['SECTION_CODE' => $sectionCode]);                            $this->arParams['SECTION_CODE'] = $sectionCode;                        }                        $res = CIBlockElement::GetList(Array(), $arFilter, false, false, $arSelect);                        $min = false;                        $max = false;                        while($ob = $res->GetNextElement()){                            $arProps = $ob->GetProperties();                            if ($min === false && $arProps[$prop['CODE']]['VALUE'] !== false) {                                $min = $arProps[$prop['CODE']]['VALUE'];                            } elseif ($min > $arProps[$prop['CODE']]['VALUE'] && $arProps[$prop['CODE']]['VALUE'] !== false) {                                $min = $arProps[$prop['CODE']]['VALUE'];                            }                            if ($max === false) {                                $max = $arProps[$prop['CODE']]['VALUE'];                            } elseif ($max < $arProps[$prop['CODE']]['VALUE']) {                                $max = $arProps[$prop['CODE']]['VALUE'];                            }                        }                        $finalProps[$prop['CODE']]['VALUES'] = ['MIN' => $min, 'MAX' => $max];                        break;                    case 'E':                        $arSelect = Array("ID", "IBLOCK_ID", "NAME", "DATE_ACTIVE_FROM");                        $arFilter = Array("IBLOCK_ID"=> $prop['LINK_IBLOCK_ID'], "ACTIVE_DATE"=>"Y", "ACTIVE"=>"Y");                        $res = CIBlockElement::GetList(Array("NAME"=>'ASC'), $arFilter, false, false, $arSelect);                        while($ob = $res->GetNextElement()) {                            $arFields = $ob->GetFields();                            $finalProps[$prop['CODE']]['VALUES'][$arFields['ID']] = $arFields['NAME'];                        }                        break;                    default:                        break;                }                $finalProps[$prop['CODE']]['NAME'] = $this->arParams['FILTER'][$prop['CODE']]['NAME'] ?? $prop['NAME'];            }            foreach ($finalProps as $key => $finalProp) {                if (empty($finalProp['VALUES'])) {                    unset($finalProps[$key]);                }            }            return $finalProps;        }        public function getSections($iblockID){            $sections = [];            $arFilter = Array('IBLOCK_ID'=>$iblockID, 'GLOBAL_ACTIVE'=>'Y');            $arSelect = ['ID', 'IBLOCK_ID', 'SECTION_PAGE_URL', 'CODE' , 'NAME', 'UF_*'];            $db_list = CIBlockSection::GetList(Array('ID'=>'ASC'), $arFilter, false, $arSelect);            $sectionCode = $this->getSectionCode();            while($ar_result = $db_list->GetNext())            {                $sections[$ar_result['ID']] = $ar_result;                if ($sectionCode) {                    if ($ar_result['CODE'] === $sectionCode) {                        $this->arResult['FILTERS']['SECTIONS']['CURR_NAME'] = $ar_result['UF_SHORT'];;                        $this->arResult['FILTERS']['SECTIONS']['CODE'] = $sectionCode;                        $currSectionID = $ar_result['ID'];                        $sections[$ar_result['ID']]['ACTIVE'] = 'active';                    } else {                        $sections[$ar_result['ID']]['ACTIVE'] = '';                    }                }            }            return $sections;        }        public function getSectionCode(){            global $APPLICATION;            $sectionCode = '';            if (count($_GET['SECTION_ID']) === 1) {                $res = CIBlockSection::GetByID($_GET["SECTION_ID"][0]);                if($ar_res = $res->GetNext()) {                    $sectionCode = $ar_res['CODE'];                }                LocalRedirect($this->arParams['PARENT_PAGE'] . $sectionCode . '/' . '?SORT_BY=' . $_GET['SORT_BY'] . '&SORT_ORDER=' . $_GET['SORT_ORDER']);            } else {                $strPage = $APPLICATION->GetCurPage();                $arrPage = explode('/',$strPage);                $sectionCode = $arrPage[2] ?? '';            }            return $sectionCode;        }        public function executeComponent()        {            global $APPLICATION;            if (count($_GET['SECTION_ID']) > 1 && count(explode('/', $APPLICATION->GetCurPage())) > 3) {                LocalRedirect($this->arParams['PARENT_PAGE'] . '?' .  $_SERVER['QUERY_STRING']);            }            if ($this->arParams['SECTIONS'] === 'Y') {                $this->arResult['FILTERS']['SECTIONS']['VALUES'] = $this->getSections($this->arParams['IBLOCK_ID']);                $this->arResult['FILTERS']['SECTIONS']['NAME'] = $this->arParams['SECTION_FILTER_NAME'];            } else {                $this->arResult['FILTERS'] = $this->prepareFilters($this->getProperties());            }            $this->includeComponentTemplate();        }    }